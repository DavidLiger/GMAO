# Cas sur le port 80 par défaut.
# Pour le 443 (le https), il faut définir un autre virtual host avec le port 443 (et s'assurer qu'Apache écoute bien le port 443: "Listen 443" doit apparaître dans l'une des confs apache par défaut)
# Et indiquer le chemin des fichiers de certification SSL (.crt, .pem et/ou .key)
<VirtualHost *:80>
	# Mettre le domaine ou le sous-domaine (il peut y en avoir plusieurs pour un même répertoire)
	ServerName api.biotrade.fr
	
	# Seul le répertoire "public" doit être accessible via le web
	DocumentRoot /var/www/eperf-v2/public

	# Définition des règles sur ce répertoire
	<Directory /var/www/eperf-v2/public>
		Options Indexes FollowSymLinks
		
		# Le "override" permet d'écrire un fichier ".htaccess" dans le répertoire "public" qui ajoute et modifie la conf Apache (ici, sur tous les paramètres possibles)
		# On peut mettre les règles de réécriture d'une URL dans un fichier ".htaccess" dans le répertoire "public".
		# Et dans ce cas, on permet le "AllowOverride All", mais ici on va configurer le "mod_rewrite" de l'URL dans cette section, un peu plus bas.
		#AllowOverride All
		AllowOverride None
		
		# Stratégie d'accès 
		Require all granted
		
		# Règle du mod_rewrite (réécriture de l'URL pour le routing Symfony)
		# Il faut avoir installé et activé le mod_rewrite:> a2enmod rewrite
		<IfModule mod_rewrite.c>
			Options -MultiViews
			RewriteEngine On
			RewriteCond %{REQUEST_FILENAME} !-f
			RewriteRule ^ index.php [QSA,L]
		</IfModule>
		
	</Directory>

	# Définition de la version PHP à utiliser (possible uniquement avec PHP-FPM)
	# Pour Debian, les dépôts de toutes les versions PHP installable sont sur "ondrej" (faire une recherche sur "PHP ondrej").
	# Il faut avoir installé et activé le module "proxy_fcgi" (normalement, c'est le cas quand on installe PHP-FPM, avec le module PHP pour apache2)
	# Tenter la commande en sudo:> a2enmod proxy_fcgi
	<IfModule proxy_fcgi_module>
		<FilesMatch \.php$>
			SetHandler "proxy:unix:/run/php/php8.3-fpm.sock|fcgi://localhost"
		</FilesMatch>
	</IfModule>

    # Configuration du cache agressif pour les fichiers statiques
    # Il faut avoir installé et activé le mod_expires:> a2enmod expires
    <IfModule mod_expires.c>
        ExpiresActive On
        ExpiresByType text/css "access plus 1 year"
        ExpiresByType text/javascript "access plus 1 year"
        ExpiresByType application/javascript "access plus 1 year"
        ExpiresByType application/x-javascript "access plus 1 year"
        ExpiresByType image/gif "access plus 1 year"
        ExpiresByType image/jpeg "access plus 1 year"
        ExpiresByType image/png "access plus 1 year"
        ExpiresByType image/webp "access plus 1 year"
        ExpiresByType image/svg+xml "access plus 1 year"
        ExpiresByType image/x-icon "access plus 1 year"
    </IfModule>

    <IfModule mod_headers.c>
        <FilesMatch "\.(css|js|gif|jpg|jpeg|png|webp|svg|ico)$">
            Header set Cache-Control "max-age=31536000, public"
        </FilesMatch>
    </IfModule>


	# Définition 
	ErrorLog ${APACHE_LOG_DIR}/eperf-v2.error.log
	CustomLog ${APACHE_LOG_DIR}/eperf-v2.access.log combined
</VirtualHost>

## Pour le HTTPS, par défaut sur Debian, l'installation d'Apache2 vient avec une conf déjà toute faite (default-ssl.conf)
## mais le certificat est auto-signé. En prod, il vaut mieux en générer un avec certbot ou faire valider les clés par une autorité certifiante.
## De plus, en prod on fera plutôt rediriger le HTTP vers le HTTPS, donc c'est le virtual host 443 qui sera la conf de base.
<VirtualHost *:443>
	# Mêmes confs que pour le 80, mais avec les params suivants en plus (dans certains cas, il peut y avoir aussi une ligne en plus pour les "ca-cert") :
	SSLEngine on
	SSLCertificateFile      /etc/ssl/certs/ssl-cert-snakeoil.pem
	SSLCertificateKeyFile   /etc/ssl/private/ssl-cert-snakeoil.key
</VirtualHost>